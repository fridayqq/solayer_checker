import os
import uuid
import struct
import base64
import base58
import requests
import csv
import datetime
import time
import random
from typing import Optional
from solders.keypair import Keypair
from dotenv import load_dotenv

"""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Solayer claim / vesting checker (Python¬†3.11+)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Usage:
  1.  pip install -r requirements.txt     # requests solders python-dotenv base58
  2.  Put PRIVATE_KEY=<base58 secret key> in a .env file (or export env‚Äëvar)
  3.  python solayer_client_full.py

The script reproduces exactly the sequence that the Solayer front‚Äëend sends:
  ‚Ä¢ GetSignatureMessage           ‚Äì receive challenge (field1 string)
  ‚Ä¢ VerifySignature               ‚Äì send signature + nonce, receive JWT (field1)
  ‚Ä¢ GetAccountInfo                ‚Äì eligibility / balance
  ‚Ä¢ GetVestingBaseInfo            ‚Äì overall vesting stats
  ‚Ä¢ GetVestingClaimInfo           ‚Äì next claim tranche

All protobuf is built manually; the only protobuf feature we need is
varint‚Äëlength‚Äëprefixed strings/bytes.
"""

# –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤:

CONFIG = {
    'delay_between_wallets': 2.0,  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    'delay_random_range': 1.0,     # –°–ª—É—á–∞–π–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∑–∞–¥–µ—Ä–∂–∫–µ (¬±)
    'max_retries': 3,              # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    'retry_delay_base': 5.0,       # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ—Ç—Ä–∞—è
    'retry_delay_multiplier': 2.0, # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
    'request_timeout': 30.0,       # –¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
}

def load_config(filename: str = 'config.json') -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        import json
        with open(filename, 'r') as f:
            custom_config = json.load(f)
        CONFIG.update(custom_config)
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filename}")
    except FileNotFoundError:
        print(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    return CONFIG

def wait_between_requests():
    """–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    base_delay = CONFIG['delay_between_wallets']
    random_delay = random.uniform(-CONFIG['delay_random_range'], CONFIG['delay_random_range'])
    total_delay = max(0.1, base_delay + random_delay)
    
    print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ {total_delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—à–µ–ª—å–∫–æ–º...")
    time.sleep(total_delay)


def retry_on_error(func, *args, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    last_exception = None
    
    for attempt in range(CONFIG['max_retries'] + 1):
        try:
            return func(*args, **kwargs)
        except requests.exceptions.RequestException as e:
            last_exception = e
            if attempt < CONFIG['max_retries']:
                delay = CONFIG['retry_delay_base'] * (CONFIG['retry_delay_multiplier'] ** attempt)
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{CONFIG['max_retries'] + 1}): {e}")
                print(f"‚è±Ô∏è  –†–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {delay:.1f}—Å...")
                time.sleep(delay)
            else:
                print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                raise last_exception
        except Exception as e:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ—Ç—Ä–∞–π
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise e
    
    raise last_exception


def process_wallet(private_key_b58: str) -> dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        kp = Keypair.from_bytes(base58.b58decode(private_key_b58))
        client = SolayerGRPCClient(kp)
        
        wallet_address = str(kp.pubkey())
        print(f"\nüîë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫: {wallet_address}")
        
        # 1) –ü–æ–ª—É—á–∞–µ–º challenge —Å —Ä–µ—Ç—Ä–∞—è–º–∏
        challenge = retry_on_error(client.get_signature_message)
        full_msg = challenge["field_1"]
        
        # 2) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å —Ä–µ—Ç—Ä–∞—è–º–∏
        nonce = str(uuid.uuid4())
        signature = client.sign_message(full_msg)
        retry_on_error(client.verify_signature, full_msg, signature, nonce)
        
        # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º eligibility —Å —Ä–µ—Ç—Ä–∞—è–º–∏
        acc_info = retry_on_error(client.get_account_info)
        eligible = "field_1" in acc_info and len(acc_info["field_1"]) > 10
        
        # 4) –ü–æ–ª—É—á–∞–µ–º vesting info –µ—Å–ª–∏ eligible
        total_allocation = "0"
        vested_amount = "0"
        
        if eligible:
            try:
                v_claim = retry_on_error(client.get_vesting_claim_info)
                vesting_data = parse_vesting_claim_data(v_claim.get("field_1", ""))
                
                if vesting_data:
                    total_allocation = vesting_data["total_allocation"]
                    vested_amount = vesting_data["vested_amount"]
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è vesting info: {e}")
        
        result = {
            'private_key': private_key_b58,
            'wallet_address': wallet_address,
            'eligible': eligible,
            'total_allocation': total_allocation,
            'vested_amount': vested_amount,
            'total_allocation_formatted': format_layer_amount(total_allocation),
            'status': 'SUCCESS'
        }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status = "‚úÖ ELIGIBLE" if eligible else "‚ùå NOT ELIGIBLE"
        allocation_text = result['total_allocation_formatted'] if eligible and total_allocation != "0" else "0.000"
        print(f"   –°—Ç–∞—Ç—É—Å: {status}")
        print(f"   Allocation: {allocation_text} LAYER")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {private_key_b58[:10]}...: {e}")
        return {
            'private_key': private_key_b58,
            'wallet_address': 'ERROR',
            'eligible': False,
            'total_allocation': '0',
            'vested_amount': '0',
            'total_allocation_formatted': '0.000',
            'status': f'ERROR: {str(e)}'
        }

def load_private_keys(filename: str = 'keys.txt') -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r') as f:
            keys = [line.strip() for line in f if line.strip()]
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keys)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ {filename}")
        return keys
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []

def save_to_csv(results: list, filename: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª"""
    if not filename:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"solayer_results_{timestamp}.csv"
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['private_key', 'wallet_address', 'eligible', 'total_allocation', 
                     'vested_amount', 'total_allocation_formatted', 'status']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for result in results:
            writer.writerow(result)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main_batch():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤"""
    print("üöÄ SOLAYER BATCH CHECKER")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏: {config['delay_between_wallets']}¬±{config['delay_random_range']}—Å")
    print(f"   –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {config['max_retries']}")
    print(f"   –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config['request_timeout']}—Å")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
    private_keys = load_private_keys('keys.txt')
    if not private_keys:
        print("‚ùå –ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    results = []
    successful = 0
    eligible_count = 0
    total_allocation_sum = 0
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
    for i, private_key in enumerate(private_keys, 1):
        print(f"\n{'='*60}")
        print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫ {i}/{len(private_keys)}")
        
        wallet_start_time = time.time()
        result = process_wallet(private_key)
        wallet_end_time = time.time()
        
        results.append(result)
        
        if result['status'] == 'SUCCESS':
            successful += 1
            if result['eligible']:
                eligible_count += 1
                try:
                    total_allocation_sum += float(result['total_allocation'])
                except (ValueError, TypeError):
                    pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        elapsed = wallet_end_time - wallet_start_time
        print(f"‚è±Ô∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed:.1f}—Å")
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—à–µ–ª—å–∫–æ–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if i < len(private_keys):
            wait_between_requests()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    total_time = time.time() - start_time
    print(f"\n{'='*60}")
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(private_keys)}")
    print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
    print(f"   Eligible –∫–æ—à–µ–ª—å–∫–æ–≤: {eligible_count}")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")
    if total_allocation_sum > 0:
        print(f"   –û–±—â–∏–π allocation: {format_layer_amount(str(int(total_allocation_sum)))}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    save_to_csv(results)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º eligible –∫–æ—à–µ–ª—å–∫–∏
    if eligible_count > 0:
        print(f"\nüéâ ELIGIBLE –ö–û–®–ï–õ–¨–ö–ò:")
        print("-" * 100)
        print(f"{'–ê–¥—Ä–µ—Å':<45} {'Allocation':<20} {'–°—Ç–∞—Ç—É—Å'}")
        print("-" * 100)
        for result in results:
            if result['eligible']:
                addr = result['wallet_address']
                allocation = result['total_allocation_formatted']
                print(f"{addr:<45} {allocation:<20} ‚úÖ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª keys.txt
    if os.path.exists('keys.txt'):
        print("üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª keys.txt")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 - –û–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫ –∏–∑ .env\n2 - Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ keys.txt\n–í–≤–æ–¥ (1/2): ").strip()
        
        if choice == '2':
            main_batch()
            return
    
    # –†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)
    pk_b58 = os.getenv("PRIVATE_KEY")
    if not pk_b58:
        raise SystemExit("PRIVATE_KEY not found in .env")
    
    result = process_wallet(pk_b58)
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ö–æ—à–µ–ª–µ–∫: {result['wallet_address']}")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ ELIGIBLE' if result['eligible'] else '‚ùå NOT ELIGIBLE'}")
    if result['eligible']:
        print(f"   Total Allocation: {result['total_allocation_formatted']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ CSV
    save_to_csv([result])

def format_layer_amount(raw_amount: str | float) -> str:
    """Convert raw token amount to LAYER tokens (assuming 9 decimals like SOL)"""
    try:
        amount = float(raw_amount)
        # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∏–º –Ω–∞ 10^9, —Ç–∞–∫ –∫–∞–∫ —á–∏—Å–ª–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ raw —Ñ–æ—Ä–º–∞—Ç–µ
        layer_amount = amount / 1_000_000_000
        return f"{layer_amount:.3f}"
    except (ValueError, TypeError):
        return f"{raw_amount} (raw)"

def parse_vesting_claim_data(field_data: str | dict) -> dict:
    """–ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vesting –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üîç –ü–∞—Ä—Å–∏–º vesting –¥–∞–Ω–Ω—ã–µ: {field_data}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å nested –ø–æ–ª—è–º–∏
        if isinstance(field_data, dict):
            allocation_fields = []
            for key, value in field_data.items():
                if isinstance(value, int) and value > 1000000:  # –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                    allocation_fields.append(value)
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ {key}: {value}")
            
            if allocation_fields:
                return {
                    'total_allocation': str(max(allocation_fields)),
                    'vested_amount': str(min(allocation_fields)) if len(allocation_fields) > 1 else str(allocation_fields[0])
                }
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏—â–µ–º —á–∏—Å–ª–∞
        if isinstance(field_data, str):
            import re
            
            # –ò—â–µ–º float —á–∏—Å–ª–∞ (—Å —Ç–æ—á–∫–æ–π)
            float_numbers = re.findall(r'\d+\.\d+', field_data)
            print(f"   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ float —á–∏—Å–ª–∞: {float_numbers}")
            
            if float_numbers:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (–æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è)
                first_number = float_numbers[0]
                
                # –ù–ï —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10^9, —Ç–∞–∫ –∫–∞–∫ —á–∏—Å–ª–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                try:
                    float_value = float(first_number)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    amount_str = str(float_value)
                    
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {first_number} -> {amount_str}")
                    
                    return {
                        'total_allocation': amount_str,
                        'vested_amount': amount_str
                    }
                except ValueError:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {first_number}")
            
            # Fallback: –∏—â–µ–º –±–æ–ª—å—à–∏–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            numbers = re.findall(r'\d{9,}', field_data)
            print(f"   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞: {numbers}")
            
            if numbers:
                return {
                    'total_allocation': numbers[0],
                    'vested_amount': numbers[1] if len(numbers) > 1 else numbers[0]
                }
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ vesting –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return {}

load_dotenv()

class SolayerGRPCClient:
    BASE_URL = (
        "https://claim.solayer.foundation/"
        "api/solayerservice.v1.SolayerService"
    )

    def __init__(self, keypair: Keypair) -> None:
        self.keypair = keypair
        self.wallet_address = str(keypair.pubkey())
        self.browser_id = base64.b64encode(os.urandom(16)).decode()
        self.token: str | None = None  # filled after VerifySignature
        self.session = requests.Session()
        self.session.timeout = CONFIG['request_timeout']

    # ------------------------------------------------------------------
    # gRPC‚ÄëWeb helpers
    # ------------------------------------------------------------------
    @staticmethod
    def _grpc_wrap(payload: bytes) -> bytes:
        """Adds the 5‚Äëbyte gRPC‚ÄëWeb prefix: 0x00 + big‚Äëendian length."""
        return b"\x00" + struct.pack(">I", len(payload)) + payload

    @staticmethod
    def _build_simple_request(request_type: int = 1) -> bytes:
        """Message with only field1 = request_type (varint)."""
        return SolayerGRPCClient._grpc_wrap(b"\x08" + bytes([request_type]))

    def _build_login_request(self) -> bytes:
        """field1=request_type=1, field2=wallet_address (string)."""
        addr = self.wallet_address.encode()
        msg = b"\x08\x01" + b"\x12" + bytes([len(addr)]) + addr
        return self._grpc_wrap(msg)

    # ------------------------------------------------------------------
    # tiny protobuf parser (varint + length‚Äëdelimited)
    # ------------------------------------------------------------------
    def _parse_protobuf_response(self, response_data):
        """–ü–∞—Ä—Å–∏–º protobuf –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if len(response_data) < 5:
                print(f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: {len(response_data)} –±–∞–π—Ç")
                return None
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º gRPC –∑–∞–≥–æ–ª–æ–≤–æ–∫ (5 –±–∞–π—Ç)
            proto_data = response_data[5:]
            print(f"üîç –î–∞–Ω–Ω—ã–µ protobuf: {len(proto_data)} –±–∞–π—Ç")
            print(f"üîç Hex –¥–∞–Ω–Ω—ã–µ: {proto_data.hex()}")
            
            if len(proto_data) == 0:
                print("‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ protobuf")
                return {}
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ protobuf
            result = {}
            i = 0
            while i < len(proto_data):
                if i >= len(proto_data):
                    break
                    
                # –ß–∏—Ç–∞–µ–º field header
                field_header = proto_data[i]
                field_number = field_header >> 3
                wire_type = field_header & 0x07
                i += 1
                
                print(f"üìã Field {field_number}, wire_type {wire_type}")
                
                if wire_type == 0:  # varint
                    value, i = self._read_varint(proto_data, i)
                    result[f'field_{field_number}'] = value
                    print(f"   üìä Varint value: {value}")
                elif wire_type == 2:  # length-delimited (string/bytes)
                    if i >= len(proto_data):
                        break
                    length, i = self._read_varint(proto_data, i)
                    if i + length > len(proto_data):
                        break
                    value = proto_data[i:i+length]
                    i += length
                    
                    print(f"   üìä Length: {length}, Raw bytes: {value.hex()}")
                    
                    try:
                        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        decoded = value.decode('utf-8')
                        result[f'field_{field_number}'] = decoded
                        print(f"   üìä String value: {decoded}")
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ base64
                        b64 = base64.b64encode(value).decode('utf-8')
                        result[f'field_{field_number}'] = b64
                        print(f"   üìä Base64 value: {b64}")
                        
                        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–π protobuf
                        try:
                            nested = self._parse_nested_protobuf(value)
                            if nested:
                                print(f"   üîç Nested protobuf: {nested}")
                                result[f'field_{field_number}_nested'] = nested
                        except:
                            pass
                else:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
                    print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π wire_type: {wire_type}")
                    i += 1
                    
            print(f"üìã –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ protobuf: {e}")
            return None

    def _parse_nested_protobuf(self, data: bytes) -> dict:
        """–ü–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ protobuf –¥–∞–Ω–Ω—ã–µ"""
        result = {}
        i = 0
        while i < len(data):
            try:
                field_header = data[i]
                field_number = field_header >> 3
                wire_type = field_header & 0x07
                i += 1
                
                if wire_type == 0:  # varint
                    value, i = self._read_varint(data, i)
                    result[f'nested_field_{field_number}'] = value
                    print(f"      üîπ Nested varint {field_number}: {value}")
                elif wire_type == 2:  # length-delimited
                    length, i = self._read_varint(data, i)
                    if i + length > len(data):
                        break
                    value = data[i:i+length]
                    i += length
                    try:
                        decoded = value.decode('utf-8')
                        result[f'nested_field_{field_number}'] = decoded
                        print(f"      üîπ Nested string {field_number}: {decoded}")
                    except:
                        result[f'nested_field_{field_number}'] = value.hex()
                        print(f"      üîπ Nested bytes {field_number}: {value.hex()}")
                else:
                    break
            except:
                break
        return result

    @staticmethod
    def _read_varint(buf: bytes, i: int) -> tuple[int, int]:
        """–ß–∏—Ç–∞–µ–º varint –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        shift = 0
        val = 0
        while i < len(buf):
            b = buf[i]
            val |= (b & 0x7F) << shift
            i += 1
            if b & 0x80 == 0:
                break
            shift += 7
        return val, i

    @classmethod
    def _parse_message(cls, data: bytes) -> dict:
        if len(data) < 5:
            return {}
        buf = data[5:]  # strip 5‚Äëbyte gRPC header
        i, out = 0, {}
        while i < len(buf):
            key = buf[i]
            field_no, wire = key >> 3, key & 0x07
            i += 1
            if wire == 0:  # varint
                val, i = cls._read_varint(buf, i)
                out[f"field_{field_no}"] = val
            elif wire == 2:  # length‚Äëdelimited
                ln, i = cls._read_varint(buf, i)
                val = buf[i : i + ln]
                i += ln
                try:
                    out[f"field_{field_no}"] = val.decode()
                except UnicodeDecodeError:
                    out[f"field_{field_no}"] = base64.b64encode(val).decode()
            else:
                raise NotImplementedError(f"wire type {wire} not handled")
        return out

    # ------------------------------------------------------------------
    # HTTP headers
    # ------------------------------------------------------------------
    def _headers(self, use_auth: bool = False) -> dict:
        h = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "browser-id": self.browser_id,
            "content-type": "application/grpc-web+proto",
            "origin": "https://claim.solayer.foundation",
            "platform": "WEB",
            "referer": "https://claim.solayer.foundation/",
            "user-agent": (
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/138.0.0.0 Safari/537.36"
            ),
            "x-grpc-web": "1",
            "x-request-id": str(uuid.uuid4()),
        }
        if use_auth and self.token:
            h["authorization"] = self.token  # exactly as server gave, no Bearer
        return h

    # ------------------------------------------------------------------
    # API methods
    # ------------------------------------------------------------------
    def get_signature_message(self) -> dict:
        resp = self.session.post(
            f"{self.BASE_URL}/GetSignatureMessage",
            headers=self._headers(),
            data=self._build_login_request(),
            timeout=CONFIG['request_timeout']
        )
        resp.raise_for_status()
        return self._parse_message(resp.content)

    def verify_signature(self, message: str, signature_b58: str, nonce: str) -> dict:
        sig_raw = base58.b58decode(signature_b58)
        addr_bytes = self.wallet_address.encode()
        nonce_bytes = nonce.encode()
        wallet_type = b"Phantom"

        parts = [
            b"\x08\x01",  # field1 request_type=1
            b"\x12" + bytes([len(addr_bytes)]) + addr_bytes,  # field2 address
            b"\x1a" + bytes([len(sig_raw)]) + sig_raw,  # field3 signature
            b"\x22" + bytes([len(nonce_bytes)]) + nonce_bytes,  # field4 nonce
            b"\x2a" + bytes([len(wallet_type)]) + wallet_type,  # field5 wallet_type
        ]
        payload = b"".join(parts)
        resp = self.session.post(
            f"{self.BASE_URL}/VerifySignature",
            headers=self._headers(),
            data=self._grpc_wrap(payload),
            timeout=CONFIG['request_timeout']
        )
        resp.raise_for_status()
        parsed = self._parse_message(resp.content)
        self.token = parsed.get("field_1")  # save JWT for later calls
        return parsed

    def get_account_info(self) -> dict:
        resp = self.session.post(
            f"{self.BASE_URL}/GetAccountInfo",
            headers=self._headers(use_auth=True),
            data=b"\x00\x00\x00\x00\x00",  # empty message
            timeout=CONFIG['request_timeout']
        )
        resp.raise_for_status()
        return self._parse_message(resp.content)

    # ---------- Vesting ----------
    def get_vesting_base_info(self) -> dict:
        resp = self.session.post(
            f"{self.BASE_URL}/GetVestingBaseInfo",
            headers=self._headers(use_auth=True),
            data=self._build_simple_request(),
        )
        resp.raise_for_status()
        return self._parse_message(resp.content)

    def get_vesting_claim_info(self) -> dict:
        resp = self.session.post(
            f"{self.BASE_URL}/GetVestingClaimInfo",
            headers=self._headers(use_auth=True),
            data=self._build_simple_request(),
            timeout=CONFIG['request_timeout']
        )
        resp.raise_for_status()
        return self._parse_message(resp.content)

    # ------------------------------------------------------------------
    # Sign helper
    # ------------------------------------------------------------------
    def sign_message(self, msg: str | bytes) -> str:
        msg_bytes = msg.encode() if isinstance(msg, str) else msg
        sig = self.keypair.sign_message(msg_bytes)
        return base58.b58encode(bytes(sig)).decode()

# ----------------------------------------------------------------------
# ------------------------------  CLI  ---------------------------------
# ----------------------------------------------------------------------
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª keys.txt
    if os.path.exists('keys.txt'):
        print("üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª keys.txt")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 - –û–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫ –∏–∑ .env\n2 - Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ keys.txt\n–í–≤–æ–¥ (1/2): ").strip()
        
        if choice == '2':
            main_batch()
            return
    
    # –†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)
    pk_b58 = os.getenv("PRIVATE_KEY")
    if not pk_b58:
        raise SystemExit("PRIVATE_KEY not found in .env")
    
    result = process_wallet(pk_b58)
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ö–æ—à–µ–ª–µ–∫: {result['wallet_address']}")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ ELIGIBLE' if result['eligible'] else '‚ùå NOT ELIGIBLE'}")
    if result['eligible']:
        print(f"   Total Allocation: {result['total_allocation_formatted']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ CSV
    save_to_csv([result])

if __name__ == "__main__":
    main()

